# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

silent: true

vars:
  GIT_SHA: {sh: git rev-parse --short HEAD}
  GIT_BRANCH: {sh: git symbolic-ref --short -q HEAD}
  APP_VERSION: {sh: cat package.json | jq -r .version}
  BUILD_DATE: '{{ now | date "2006-01-02T15:04:05Z" }}'
  PKG_FLAGS_PREFIX: github.com/pingplop/pingplop/meta
  IMAGE_NAME: pingplop/pingplop
  CONTAINER_NAME: pingplop

tasks:
  default:
    desc: 'Print all available tasks'
    cmd: task --list-all

  prepare:
    cmd: docker-compose -f docker-compose.yml up -d

  cleanup:
    cmds:
      - defer: rm -rf tmp/ build/ web/dist/
      - docker-compose -f docker-compose.yml down --remove-orphans

  install-deps:
    aliases: ['deps']
    cmds: ['mkdir -p build', 'pnpm install', 'go mod download', 'go mod tidy', 'go mod vendor']

  # -----------------------------------------------------------------------------------------------
  # Tasks for Docker development
  # -----------------------------------------------------------------------------------------------

  dev:
    deps: ['install-deps']
    cmd: air -c air.toml

  build:
    env:
      CGO_ENABLED: 0
      LD_FLAGS: "-w -s -extldflags '-static' -X {{.PKG_FLAGS_PREFIX}}.Version={{.APP_VERSION}} -X {{.PKG_FLAGS_PREFIX}}.BuildDate={{.BUILD_DATE}}"
    deps: ['install-deps']
    cmds:
      - pnpm build
      - go build --ldflags="$LD_FLAGS" -a -o build/pingplop cmd/app/main.go
      - ls -lAh build

  start:
    deps: ['build']
    cmd: ./build/pingplop serve

  lint:
    cmds:
      - golangci-lint run -c golangci.yml ./...
      # - gosec -quiet -no-fail ./...

  # -----------------------------------------------------------------------------------------------
  # Tasks for working with migration
  # -----------------------------------------------------------------------------------------------

  migrate-new:
    desc: 'Example: task migrate-new name=MIGRATION_NAME'
    requires:
      vars: [name]
    cmd: sql-migrate new {{.name}} --env=development

  migrate-up:
    cmds: ['sql-migrate up --env=development', 'sql-migrate status --env=development']

  migrate-down:
    cmds: ['sql-migrate down --env=development', 'sql-migrate status --env=development']

  migrate-status:
    cmd: sql-migrate status --env=development

  migrate-reset:
    cmds: ['rm -f build/data/pingplop.db', 'task migrate-up']

  # -----------------------------------------------------------------------------------------------
  # Tasks for create release
  # -----------------------------------------------------------------------------------------------

  reset-tag:
    internal: true
    cmds:
      - git push --delete origin v{{.APP_VERSION}}
      - git tag --delete v{{.APP_VERSION}}

  release-snapshot:
    cmds:
      - goreleaser release --snapshot --clean --skip=publish
      - cat build/releases/checksums.txt

  release-single:
    cmd: goreleaser build --single-target --snapshot --clean

  release:
    desc: Trigger GitHub actions for release
    # deps: ['reset-tag']
    cmds:
      - git add --all . && git commit -am "create release v{{.APP_VERSION}}"
      - git push origin {{.GIT_BRANCH}}
      - git tag v{{.APP_VERSION}} -m "create release v{{.APP_VERSION}}"
      - git push origin v{{.APP_VERSION}}
      # - goreleaser release --clean
      # - cat build/releases/checksums.txt

  # -----------------------------------------------------------------------------------------------
  # Tasks for Docker container
  # -----------------------------------------------------------------------------------------------

  docker-build:
    env:
      DOCKER_BUILDKIT: 1
    cmds:
      - |
        docker build . \
          --build-arg APP_VERSION={{.APP_VERSION}} \
          --build-arg BUILD_DATE={{.BUILD_DATE}} \
          -t {{.IMAGE_NAME}}:{{.APP_VERSION}} \
          -t {{.IMAGE_NAME}}:latest
      - docker image list | grep {{.IMAGE_NAME}}

  docker-push:
    cmds:
      - goreleaser release --cleandocker push {{.IMAGE_NAME}}:latest && docker push {{.IMAGE_NAME}}:{{.APP_VERSION}}

  docker-run:
    cmds:
      - docker run --rm -it --name {{.CONTAINER_NAME}} -v "$(pwd)/tmp:/app/data" --env-file .env.docker -p 3080:3080 {{.IMAGE_NAME}}:latest

  docker-shell:
    cmds:
      - docker run --rm -it --entrypoint sh {{.IMAGE_NAME}}:latest

  docker-migrate:
    cmds:
      - docker exec --env-file .env.docker {{.CONTAINER_NAME}} /app/pingplop migrate
